#version 460
#extension GL_EXT_ray_tracing : require

struct Sphere {
    vec3 center;
    vec3 color;
    float radius;
};

struct HitAttribute {
    vec3 position;
    vec3 normal;
};

layout(std430, set = 4, binding = 0) buffer SphereBuffer {
    Sphere[] spheres;
};

hitAttributeEXT HitAttribute hitAttr;

void main() {
    vec3 ro = gl_WorldRayOriginEXT;
    vec3 rd = gl_WorldRayDirectionEXT;
    Sphere s = spheres[gl_InstanceCustomIndexEXT];

    vec3 oc = s.center - ro;
    float a = dot(rd, rd);
    float b = -2.0 * dot(rd, oc);
    float c = dot(oc, oc) - s.radius * s.radius;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0) {
        return;
    }

    float tMin = (-b - sqrt(discriminant)) / (2.0 * a);
    if (tMin >= 0.0) {
        hitAttr.position = ro + tMin * rd;
        hitAttr.normal = normalize(hitAttr.position - s.center);
        reportIntersectionEXT(tMin, 0);
    }
}