#version 460
#extension GL_EXT_ray_tracing : require

// structs
struct Payload {
    vec2 nCoord;
    vec3 color;
    int depth;
};

struct Sphere {
    vec3 center;
    vec3 color;
    float radius;
};

// buffers
layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 0, rgba32f) uniform writeonly image2D image;
layout(set= 2, binding = 0) uniform CameraMatrix {
    mat4 view;
    mat4 proj;
} cameraMat;
layout(set = 3, binding = 0) uniform Camera {
    vec3 position;
    vec3 front;
    vec3 up;
    float fov;
} camera;
layout(std430, set = 4, binding = 0) buffer SphereBuffer {
    Sphere[] spheres;
};

// push constants
layout(push_constant) uniform PushConstants {
    float time;
    vec2  windowSize;
} pushConsts;

// payload
layout(location = 0) rayPayloadEXT Payload payload;

// constants
int NUM_SAMPLS = 5;

// random utils
float rand(float x) {
    return fract(sin(x) * 55555.7777777);
}

float randRange(float x) {
    return 2.0 * rand(x) - 1.0;
}

vec3 randVec3(vec3 position) {
    return vec3(randRange(position.x), randRange(position.y), randRange(position.z));
}

void main()
{
    ivec2 pixelCoord = ivec2(gl_LaunchIDEXT.xy);
    ivec2 imageSize = ivec2(gl_LaunchSizeEXT.xy);
    vec3 cameraPos = camera.position;
    vec3 front = camera.front;
    vec3 up = camera.up;
    vec3 right = normalize(cross(front, up));

    float aspect = float(imageSize.x) / float(imageSize.y);
    float planeHeight = tan(camera.fov * 0.5) * 2.0;
    float planeWidth  = planeHeight * aspect;

    float u = (float(pixelCoord.x) + 0.5) / float(imageSize.x) * 2.0 - 1.0;
    float v = (float(pixelCoord.y) + 0.5) / float(imageSize.y) * 2.0 - 1.0;
    v = -v;

    payload.nCoord = vec2(u, v);
    vec3 rayU = u * (planeWidth  * 0.5) * right;
    vec3 rayV = v * (planeHeight * 0.5) * up;
    vec3 rayDir = normalize(front + rayU + rayV);
    vec3 rayOrigin = cameraPos;

    vec3 color = vec3(0.0);
    for (int i = 0; i < NUM_SAMPLS; i++) {
        payload.color = vec3(0.0);
        payload.depth = 0;
        vec3 diff = randVec3(cameraPos + rand(i)) * 0.002;
        traceRayEXT(
            topLevelAS,
            gl_RayFlagsOpaqueEXT,
            0xFF,
            0,
            0,
            0,
            rayOrigin,
            0.001,
            rayDir + diff,
            10000.0,
            0
        );
        color += payload.color;
    }
    color /= NUM_SAMPLS;

    imageStore(image, pixelCoord, vec4(color, 1.0));
}